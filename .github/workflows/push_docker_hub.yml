name: Build, Push and Secure Notify

on:
  push:
    branches: [main]
    tags: [v*]

jobs:
  build-and-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          push: true
          tags: |
            jyyqaj/certbot-aliyun-docker:latest
            jyyqaj/certbot-aliyun-docker:${{ github.sha }}

      - name: Generate security signature
        id: sign
        run: |
          # 创建飞书官方签名生成脚本
          cat << 'EOF' > feishu_sign.py
          import hashlib
          import base64
          import hmac
          import sys
          
          def gen_sign(timestamp, secret):
              # 拼接timestamp和secret - 完全遵循飞书官方示例
              string_to_sign = '{}\n{}'.format(timestamp, secret)
              hmac_code = hmac.new(
                  secret.encode("utf-8"), 
                  string_to_sign.encode("utf-8"), 
                  digestmod=hashlib.sha256
              ).digest()
              # 对结果进行base64处理
              sign = base64.b64encode(hmac_code).decode('utf-8')
              return sign
          
          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print("Usage: python feishu_sign.py <timestamp> <secret>")
                  sys.exit(1)
          
              timestamp = sys.argv[1]
              secret = sys.argv[2]
              print(gen_sign(timestamp, secret))
          EOF
          
          # 获取当前时间戳和密钥
          TIMESTAMP=$(date +%s)
          SECRET="${{ secrets.FEISHU_WEBHOOK_SECRET }}"
          
          # 使用官方脚本生成签名
          SIGNATURE=$(python feishu_sign.py "$TIMESTAMP" "$SECRET")
          
          # 保存到环境变量
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "SIGNATURE=$SIGNATURE" >> $GITHUB_ENV
          
          echo "Generated timestamp: $TIMESTAMP"
          echo "Generated signature: $SIGNATURE"

      - name: Send secure notification
        id: notify
        uses: fjogeleit/http-request-action@v1.12.0
        if: always()
        with:
          url: ${{ secrets.FEISHU_WEBHOOK_URL }}
          method: 'POST'
          contentType: 'application/json'
          headers: '{
          "X-Lark-Request-Timestamp": "${{ env.TIMESTAMP }}",
          "X-Lark-Signature": "${{ env.SIGNATURE }}"
        }'
          data: '{
          "msg_type": "post",
          "content": {
            "post": {
              "zh_cn": {
                "title": "${{ job.status == ''success'' && ''✅ Docker 构建成功'' || ''❌ Docker 构建失败'' }}",
                "content": [
                  [{"tag":"text","text":"项目: ${{ github.repository }}"}],
                  [{"tag":"text","text":"分支: ${{ github.ref_name }}"}],
                  [{"tag":"text","text":"提交: ${{ github.sha }}"}],
                  [{"tag":"text","text":"触发者: ${{ github.actor }}"}],
                  [{"tag":"text","text":"状态: ${{ job.status }}"}],
                  [{"tag":"a","text":"查看构建详情","href":"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}]
                ]
              }
            }
          }
        }'

      - name: Handle notification error
        if: failure() && steps.notify.conclusion == 'failure'
        run: |
          echo "::error::通知发送失败!"
          echo "请检查以下内容:"
          echo "1. FEISHU_WEBHOOK_URL 是否正确"
          echo "2. FEISHU_WEBHOOK_SECRET 是否匹配飞书后台设置"
          echo "3. 飞书机器人是否启用签名验证"
          echo "4. 网络连接是否正常"
          
          # 显示详细的调试信息
          echo "Timestamp: ${{ env.TIMESTAMP }}"
          echo "Signature: ${{ env.SIGNATURE }}"
          echo "Webhook URL: ${{ secrets.FEISHU_WEBHOOK_URL }}"
          
          # 尝试直接调用飞书API进行验证
          echo "::group::飞书API验证测试"
          curl -v -X POST ${{ secrets.FEISHU_WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -H "X-Lark-Request-Timestamp: ${{ env.TIMESTAMP }}" \
            -H "X-Lark-Signature: ${{ env.SIGNATURE }}" \
            -d '{"msg_type":"text","content":{"text":"签名验证测试消息"}}'
          echo "::endgroup::"